// Script para criar usu√°rio admin inicial - VERS√ÉO FUNCIONAL
const { createClient } = require('@supabase/supabase-js');

// =====================================================
// CONFIGURA√á√ÉO DIRETA - SEM DEPEND√äNCIAS EXTERNAS
// ===========
// 
// 
// ==========================================

// Substitua estas URLs pelas suas credenciais reais do Supabase
const SUPABASE_URL = 'https://qqmfrsgkfpnjeuwaxgiu.supabase.co';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFxbWZyc2drZnBuamV1d2F4Z2l1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU0Mzk0NDQsImV4cCI6MjA3MTAxNTQ0NH0.AhhSFA2ER-xNZ0qVN3mQczb9TeuUR7wfzDOGzNXoy6U';

// =====================================================
// DADOS DO USU√ÅRIO ADMIN
// =====================================================
const ADMIN_EMAIL = 'admin@grupocentral.com.br';
const ADMIN_PASSWORD = 'admin123456';
const ADMIN_NAME = 'Administrador Grupo Central';

console.log('üöÄ SCRIPT DE CRIA√á√ÉO DE USU√ÅRIO ADMIN');
console.log('=====================================================');
console.log(`üìß Email: ${ADMIN_EMAIL}`);
console.log(`üîë Senha: ${ADMIN_PASSWORD}`);
console.log(`üë§ Nome: ${ADMIN_NAME}`);
console.log('=====================================================');

// =====================================================
// CONFIGURA√á√ÉO DO CLIENTE SUPABASE
// =====================================================
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// =====================================================
// FUN√á√ÉO PRINCIPAL
// =====================================================
async function createAdminUser() {
  try {
    console.log('\nüîç Verificando usu√°rios existentes...');
    
    // Listar usu√°rios existentes
    const { data: existingUsers, error: listError } = await supabase.auth.admin.listUsers();
    
    if (listError) {
      console.error('‚ùå Erro ao listar usu√°rios:', listError.message);
      throw listError;
    }
    
    const existingUser = existingUsers.users.find(u => u.email === ADMIN_EMAIL);
    
    if (existingUser) {
      console.log('‚ÑπÔ∏è  Usu√°rio admin j√° existe. Atualizando senha...');
      
      // Atualizar senha do usu√°rio existente
      const { data: updatedUser, error: updateError } = await supabase.auth.admin.updateUserById(
        existingUser.id,
        {
          password: ADMIN_PASSWORD,
          email_confirm: true,
          user_metadata: {
            full_name: ADMIN_NAME,
            role: 'admin'
          }
        }
      );
      
      if (updateError) {
        console.error('‚ùå Erro ao atualizar usu√°rio:', updateError.message);
        throw updateError;
      }
      
      console.log('‚úÖ Senha do usu√°rio admin atualizada com sucesso!');
      
      // Criar/atualizar perfil
      await createOrUpdateProfile(existingUser.id);
      
    } else {
      console.log('üìù Criando novo usu√°rio admin...');
      
      // Criar usu√°rio usando Admin API
      const { data: user, error: createError } = await supabase.auth.admin.createUser({
        email: ADMIN_EMAIL,
        password: ADMIN_PASSWORD,
        email_confirm: true,
        user_metadata: {
          full_name: ADMIN_NAME,
          role: 'admin'
        }
      });
      
      if (createError) {
        console.error('‚ùå Erro ao criar usu√°rio:', createError.message);
        throw createError;
      }
      
      console.log('‚úÖ Usu√°rio admin criado com sucesso!');
      console.log(`üë§ ID do usu√°rio: ${user.user.id}`);
      
      // Criar perfil do usu√°rio
      await createOrUpdateProfile(user.user.id);
    }
    
    console.log('\nüéâ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!');
    console.log('=====================================================');
    console.log('üìã CREDENCIAIS DE LOGIN:');
    console.log(`   üìß Email: ${ADMIN_EMAIL}`);
    console.log(`   üîë Senha: ${ADMIN_PASSWORD}`);
    console.log('=====================================================');
    console.log('üöÄ PR√ìXIMOS PASSOS:');
    console.log('1. Acesse: http://localhost:3000/admin');
    console.log('2. Use as credenciais acima para fazer login');
    console.log('3. Teste se o dashboard funciona corretamente');
    console.log('=====================================================');
    
  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rio admin:', error.message);
    
    if (error.message.includes('relation "profiles" does not exist')) {
      console.log('\nüí° Dica: A tabela profiles n√£o existe. Execute primeiro:');
      console.log('   node supabase/scripts/setup-all.js');
    }
    
    if (error.message.includes('Invalid API key')) {
      console.log('\nüí° Dica: Verifique se as credenciais do Supabase est√£o corretas');
      console.log('   - SUPABASE_URL: deve ser a URL do seu projeto');
      console.log('   - SUPABASE_SERVICE_KEY: deve ser a chave de servi√ßo (service_role)');
    }
  }
}

// =====================================================
// FUN√á√ÉO AUXILIAR - CRIAR/ATUALIZAR PERFIL
// =====================================================
async function createOrUpdateProfile(userId) {
  try {
    const { error: profileError } = await supabase
      .from('profiles')
      .upsert({
        id: userId,
        full_name: ADMIN_NAME,
        role: 'admin',
        updated_at: new Date().toISOString()
      });
    
    if (profileError) {
      console.warn('‚ö†Ô∏è  Erro ao criar perfil:', profileError.message);
      console.log('   Isso pode ser normal se a tabela profiles n√£o existir ainda');
    } else {
      console.log('‚úÖ Perfil do admin criado/atualizado!');
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è  Erro ao criar perfil (pode ser normal):', error.message);
  }
}

// =====================================================
// EXECUTAR O SCRIPT
// =====================================================
console.log('üöÄ Iniciando cria√ß√£o do usu√°rio admin...\n');
createAdminUser();
